//: Playground - noun: a place where people can play

import UIKit

//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ

struct Room {
    static let wall  = "‚óæÔ∏è"
    static let floor = "‚óΩÔ∏è"
    
    static let w = 10
    static let h = 10
}

enum direction {
    case Right
    case Left
    case Top
    case Bottom
}

class Person {
    static let icon = "üèÉüèº"
    
    var point: (x: Int, y: Int) {
        didSet {
            point.x = (point.x > 1 && point.x < Room.w) ? point.x : oldValue.x
            point.y = (point.y > 1 && point.y < Room.h) ? point.y : oldValue.y
        }
    }
    init (point: (x: Int, y: Int)) {
        self.point = point
        //self.point.x = point.x
        //self.point.y = point.y
    }
    
    
   static func drawLocation(man: Person, box: Box) {
        
        print()
        
        for w in (1...Room.h).reversed() {
            
            var str = ""
            
            for h in (1...Room.w) {
                
                if w == 1 || w == Room.w {
                    str = str + Room.wall
                } else if h == 1 || h == Room.h {
                    str = str + Room.wall
                } else if w == man.point.x && h == man.point.y {
                    str = str + Person.icon
                } else if w == box.point.x && h == box.point.y {
                    str = str + Box.icon
                } else {
                    str = str + Room.floor
                }
                
            }
            print(str)
        }
        
    }
    
}

class Box {
    static let icon = "üí∞"
    
    var point: (x: Int, y: Int) {
        didSet {
            point.x = (point.x > 1 && point.x < Room.w) ? point.x : oldValue.x
            point.y = (point.y > 1 && point.y < Room.h) ? point.y : oldValue.y
        }
    }
    
    init (point: (x: Int, y: Int)) {
        self.point = point
    }
}

func moveTo(d: direction, p: Person, b: Box) {
    
    switch d {
    case .Bottom:
        p.point.x  -= 1
        if isEgual(p1: p, p2: b) {
            if isEnd(i: b.point.x) {
               p.point.x += 1
            } else {
               b.point.x -= 1
            }
        }
    case .Top:
        p.point.x  += 1
        if isEgual(p1: p, p2: b) {
            if isEnd(i: b.point.x) {
                p.point.x -= 1
            } else {
                b.point.x += 1
            }
        }
    case .Right:
        p.point.y  += 1
        if isEgual(p1: p, p2: b) {
            if isEnd(i: b.point.y) {
                p.point.y -= 1
            } else {
                b.point.y += 1
            }
        }
    case .Left:
        p.point.y  -= 1
        if isEgual(p1: p, p2: b) {
            if isEnd(i: b.point.y) {
                p.point.y += 1
            } else {
                b.point.y -= 1
            }
        }
    }
}

func isEgual(p1: Person, p2: Box) -> Bool {
    return p1.point.x == p2.point.x && p1.point.y == p2.point.y
}
func isEnd(i: Int) -> Bool {
    return i == 2 || i == 9
}


var newPerson = Person(point: (x: 9, y: 6))
var newBox    = Box(point: (x: 9, y: 7))
Person.drawLocation(man: newPerson, box: newBox)

moveTo(d: .Right, p: newPerson, b: newBox)
Person.drawLocation(man: newPerson, box: newBox)

moveTo(d: .Right, p: newPerson, b: newBox)
Person.drawLocation(man: newPerson, box: newBox)

//moveTo(.Bottom, p: newPerson, b: newBox)
//Person.drawLocation(newPerson, box: newBox)

newBox.point.x
newPerson.point.x


//2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º—á–∏–∫ –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑
//–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏

//3. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏ —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.

//4. –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —è—â–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å. –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ —è—â–∏–∫ :)

//5. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—É–¥–∞ –Ω–∞–¥–æ —è—â–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –∏ –¥–≤–∏–≥–∞–π—Ç–µ :)

